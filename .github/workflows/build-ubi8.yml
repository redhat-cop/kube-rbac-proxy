name: (Build) - UBI8

on:
  workflow_call:
    secrets:
      REGISTRY_USERNAME:
        description: "Username for Registry"
        required: true
      REGISTRY_PASSWORD:
        description: "Password for Registry"
        required: true
      IMAGE_REPOSITORY:
        description: "Registry image e.g. quay.io/redhat-cop/$repoisitory-name"
        required: false
  push:
    tags:        
      - v*
  
env:
  BUILD_PLATFORMS: "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x"

jobs:
   setup:
    runs-on: ubuntu-latest
    name: setup
    steps:
      - name: Setting Workflow Variables
        id: set-variables
        run: |
          echo "repository_name=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT
          # Create Distribution Matrix
          echo "dist_matrix=$(echo -n "${{ env.BUILD_PLATFORMS }}" | jq -csR '. | split(",")')" >> $GITHUB_OUTPUT 

      - name: Setting Image Variables
        id: set-variables-image
        run: |
          if [ "${{ secrets.IMAGE_REPOSITORY }}" == "" ]; then
            echo "image_repository_name=${{ steps.set-variables.outputs.repository_name }}" >> $GITHUB_OUTPUT
            echo "image_registry=quay.io/${{ github.repository_owner }}" >> $GITHUB_OUTPUT
          else
            IMAGE_REPOSITORY="${{ secrets.IMAGE_REPOSITORY }}"
            echo "image_repository_name=${IMAGE_REPOSITORY##*/}" >> $GITHUB_OUTPUT
            echo "image_registry=${IMAGE_REPOSITORY%/*}" >> $GITHUB_OUTPUT
          fi    
      - name: Build Go Cache Paths
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT       
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setting Go Variables
        id: set-go-variables
        run: |
          echo "go_version=$(yq eval '.env.go-version' .github/workflows/build.yml)" >> $GITHUB_OUTPUT
      - name: Set up Go 1.x
        uses: actions/setup-go@v1
        with:
          go-version: ${{ steps.set-go-variables.outputs.go_version }}
      - name: Set VERSION Variable tracking from upstream
        id: set-version
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
      - name: Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - name: Go Mod Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
      - name: Go Dependencies
        run: go mod download
    outputs:
      repository_name: ${{ steps.set-variables.outputs.repository_name }}
      image_repository_name: ${{ steps.set-variables-image.outputs.image_repository_name}}
      image_registry: ${{ steps.set-variables-image.outputs.image_registry }}
      go_build: ${{ steps.go-cache-paths.outputs.go-build }}
      go_mod: ${{ steps.go-cache-paths.outputs.go-mod }}
      go_version: ${{ steps.set-go-variables.outputs.go_version }}
      tag_event: ${{ steps.set-variables-image.outputs.tag_event }}
      dist_matrix: ${{ steps.set-variables.outputs.dist_matrix }}
      version: ${{ steps.set-version.outputs.version}}

     
   build-go:
    runs-on: ubuntu-latest
    name: build-go
    needs: ["setup"]
    strategy:
      matrix:
        platform: ${{ fromJson(needs.setup.outputs.dist_matrix) }}
    env:
      REPOSITORY_NAME: ${{ needs.setup.outputs.repository_name }}
      VERSION: ${{ needs.setup.outputs.version }}
      ARCHIVE: ${{ needs.setup.outputs.repository_name }}-${{ github.run_id }}-${{ github.run_number }}
      GO_VERSION: ${{ needs.setup.outputs.go_version }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code
        uses: actions/checkout@v2
      - name: Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup.outputs.go_build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - name: Go Mod Cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup.outputs.go_mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
      - name: Prepare Build Step
        id: setup-build-step
        run: |
          echo "platform_os=$(echo ${{ matrix.platform }} |  cut -d/ -f1)" >> $GITHUB_OUTPUT
          echo "platform_arch=$(echo ${{ matrix.platform }} |  cut -d/ -f2)" >> $GITHUB_OUTPUT
      - name: Build Code
        shell: bash
        env:
          GOOS: ${{ steps.setup-build-step.outputs.platform_os }}
          GOARCH: ${{ steps.setup-build-step.outputs.platform_arch }}
        run: make build      
      - name: Archive go-platform binaries
        env:
          GOOS: ${{ steps.setup-build-step.outputs.platform_os }}
          GOARCH: ${{ steps.setup-build-step.outputs.platform_arch }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE }}-${{ env.GOOS }}-${{ env.GOARCH }}
          path: |
            _output/kube-rbac-proxy-${{ env.GOOS }}-${{ env.GOARCH }}
          if-no-files-found: error
          retention-days: 1
    outputs:
      platform_os: ${{ steps.setup-build-step.outputs.platform_os }}
      platform_arch: ${{ steps.setup-build-step.outputs.platform_arch }}
          
   build-image-multiarch:
    runs-on: ubuntu-latest
    name: build-image-multiarch
    needs: ["setup", "build-go"]
    env:
      ARCHIVE: ${{ needs.setup.outputs.repository_name }}-${{ github.run_id }}-${{ github.run_number }}-${{ needs.build-go.outputs.platform_os }}-${{ needs.build-go.outputs.platform_arch }}
      IMAGE_REPOSITORY: "${{ needs.setup.outputs.image_registry }}/${{ needs.setup.outputs.image_repository_name }}"
      IMAGE_REGISTRY: ${{ needs.setup.outputs.image_registry }}
      REPOSITORY_NAME: ${{ needs.setup.outputs.repository_name }}
      VERSION: ${{ needs.setup.outputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Download go-build Archive
        id: download-archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARCHIVE }}
      - name: list
        shell: bash
        run: |
          ls -lah
          pwd
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1       
      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}  
      - name: Build Image 
        uses: docker/build-push-action@v2
        with:
          build-args: |
            BINARY=${{ env.REPOSITORY_NAME }}
          context: .
          file: ./.ci/Containerfile
          platforms: ${{ env.BUILD_PLATFORMS }}
          push: true
          tags: "${{ env.IMAGE_REPOSITORY }}:latest,${{ env.IMAGE_REPOSITORY }}:${{ env.VERSION }}"