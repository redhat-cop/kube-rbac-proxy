name: build-ubi8
on: 
  push:
    branches:
      - master
      - main
    tags:        
      - v*
env:
  BUILD_PLATFORMS: "linux/amd64,linux/arm64"
  GO_VERSION: '1.15'
  KIND_VERSION: 'v0.11.0' 

jobs:
   setup:
    runs-on: ubuntu-latest
    name: setup
    steps:
      - name: Setting Workflow Variables
        id: set-variables
        run: |
          echo "::set-output name=repository_name::$(basename $GITHUB_REPOSITORY)"
          # Create Distribution Matrix
          echo "::set-output name=dist_matrix::$(echo -n "${{ env.BUILD_PLATFORMS }}" | jq -csR '. | split(",")')"
      - name: Setting Image Variables
        id: set-variables-image
        run: |
          if [ "${{ secrets.IMAGE_REPOSITORY }}" == "" ]; then
            echo "::set-output name=image_repository_name::${{ steps.set-variables.outputs.repository_name }}"
            echo "::set-output name=image_registry::quay.io/${{ github.repository_owner }}"
          else
            IMAGE_REPOSITORY="${{ secrets.IMAGE_REPOSITORY }}"
            echo "::set-output name=image_repository_name::${IMAGE_REPOSITORY##*/}"
            echo "::set-output name=image_registry::${IMAGE_REPOSITORY%/*}"
          fi
  
      - name: Build Go Cache Paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Set up Go 1.x
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Set VERSION Variable tracking from upstream
        id: set-version
        run: echo "::set-output name=version::$(cat VERSION)"
        
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Go Dependencies
        run: go mod download

    outputs:
      repository_name: ${{ steps.set-variables.outputs.repository_name }}
      image_repository_name: ${{ steps.set-variables-image.outputs.image_repository_name}}
      image_registry: ${{ steps.set-variables-image.outputs.image_registry }}
      go_build: ${{ steps.go-cache-paths.outputs.go-build }}
      go_mod: ${{ steps.go-cache-paths.outputs.go-mod }}
      tag_event: ${{ steps.set-variables-image.outputs.tag_event }}
      dist_matrix: ${{ steps.set-variables.outputs.dist_matrix }}
      version: ${{ steps.set-version.outputs.version}}

     
   build-image:
    runs-on: ubuntu-latest
    name: build-image
    needs: ["setup"]
    strategy:
      matrix:
        platform: ${{ fromJson(needs.setup.outputs.dist_matrix) }}
    env:
      REPOSITORY_NAME: ${{ needs.setup.outputs.repository_name }}
      IMAGE_REPOSITORY: "${{ needs.setup.outputs.image_registry }}/${{ needs.setup.outputs.image_repository_name }}"
      IMAGE_REGISTRY: ${{ needs.setup.outputs.image_registry }}
      VERSION: ${{ needs.setup.outputs.version }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.go-version }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ needs.setup.outputs.go_build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ needs.setup.outputs.go_mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Prepare Build Step
        id: setup-build-step
        run: |
          echo "::set-output name=platform_os::$(echo ${{ matrix.platform }} |  cut -d/ -f1)"
          echo "::set-output name=platform_arch::$(echo ${{ matrix.platform }} |  cut -d/ -f2)"
    
      - name: Build Code
        shell: bash
        env:
          GOOS: ${{ steps.setup-build-step.outputs.platform_os }}
          GOARCH: ${{ steps.setup-build-step.outputs.platform_arch }}
        run: make build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
            
      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
          
      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          build-args: |
            BINARY="${{ env.REPOSITORY_NAME }}-${{ steps.setup-build-step.outputs.platform_os }}-${{ steps.setup-build-step.outputs.platform_arch }}"
          context: .
          file: ./Containerfile
          platforms: ${{ matrix.platform }}
          push: false
          tags: "${{ env.IMAGE_REPOSITORY }}:latest,${{ env.IMAGE_REPOSITORY }}:${{ env.VERSION }}"
