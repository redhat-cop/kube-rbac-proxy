name: Update Base Image

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  BUILD_PLATFORMS: "linux/amd64,linux/arm64,linux/arm,linux/ppc64le,linux/s390x"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps: 
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setting Workflow Variables
        id: set-variables
        run: |
          echo "repository_name=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT
          # Create Distribution Matrix
          echo "dist_matrix=$(echo -n "${{ env.BUILD_PLATFORMS }}" | jq -csR '. | split(",")')" >> $GITHUB_OUTPUT
          echo "upstream_image=$(grep -oP '(?<=FROM ).*' ./.ci/Containerfile)" >> $GITHUB_OUTPUT
          echo "downstream_image=${{ env.IMAGE_REPOSITORY }}:${{ env.VERSION }})" >> $GITHUB_OUTPUT

      - name: Setting Image Variables
        id: set-variables-image
        run: |
          if [ "${{ secrets.IMAGE_REPOSITORY }}" == "" ]; then
            echo "image_repository_name=${{ steps.set-variables.outputs.repository_name }}" >> $GITHUB_OUTPUT
            echo "image_registry=quay.io/${{ github.repository_owner }}" >> $GITHUB_OUTPUT
          else
            IMAGE_REPOSITORY="${{ secrets.IMAGE_REPOSITORY }}"
            echo "image_repository_name=${IMAGE_REPOSITORY##*/}" >> $GITHUB_OUTPUT
            echo "image_registry=${IMAGE_REPOSITORY%/*}" >> $GITHUB_OUTPUT
          fi
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        with:
          semver_only: false      
      - name: Latest version
        id: latest-version
        run: |
          echo "version=${{ steps.get-latest-tag.outputs.tag }}" >> $GITHUB_OUTPUT
      - uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: prerelease      
      - name: Next version
        id: next-version
        run: |
          echo "version=${{ steps.bump-semver.outputs.new_version }}" >> $GITHUB_OUTPUT
    outputs:
      repository_name: ${{ steps.set-variables.outputs.repository_name }}
      image_repository_name: ${{ steps.set-variables-image.outputs.image_repository_name}}
      dist_matrix: ${{ steps.set-variables.outputs.dist_matrix }}
      upstream_image: ${{ steps.set-variables.outputs.upstream_image }}
      downstream_image: ${{ steps.set-variables.outputs.downstream_image }}
      image_registry: ${{ steps.set-variables-image.outputs.image_registry }}
      latest_version: ${{ steps.latest-version.outputs.version}}
      next_version: ${{ steps.next-version.outputs.version}}

  check-image-labels:
    runs-on: ubuntu-latest
    name: check-image-labels
    needs: ["setup"]
    strategy:
      matrix:
        platform: ${{ fromJson(needs.setup.outputs.dist_matrix) }}
    env:
      REPOSITORY_NAME: ${{ needs.setup.outputs.repository_name }}
      UPSTREAM_IMAGE: ${{ needs.setup.outputs.upstream_image }}
      DOWNSTREAM_IMAGE: ${{ needs.setup.outputs.downstream_image }}
      IMAGE_REGISTRY: ${{ needs.setup.outputs.image_registry }}
      IMAGE_REPOSITORY: "${{ needs.setup.outputs.image_registry }}/${{ needs.setup.outputs.image_repository_name }}"
      LATEST_VERSION: ${{ needs.setup.outputs.latest_version }}
    steps:
      - name: Prepare Image Label Lookup Step
        id: setup-image-label-lookup
        run: |
          echo "platform_os=$(echo ${{ matrix.platform }} |  cut -d/ -f1)" >> $GITHUB_OUTPUT
          echo "platform_arch=$(echo ${{ matrix.platform }} |  cut -d/ -f2)" >> $GITHUB_OUTPUT
      - name: Login to Registry
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }} 
      - name: Get Image Labels
        id: set-image-label-vars
        env:
          OS: ${{ steps.setup-image-label-lookup.outputs.platform_os }}
          ARCH: ${{ steps.setup-image-label-lookup.outputs.platform_arch }}
        run: |
          echo "parent-vcs-ref=$(skopeo inspect --override-os=${{ env.OS }} --override-arch=${{ env.ARCH }} docker://${{ env.UPSTREAM_IMAGE }} | jq '.Labels["vcs-ref"]')" >> $GITHUB_OUTPUT
          echo "child-vcs-ref=$(skopeo inspect --override-os=${{ env.OS }} --override-arch=${{ env.ARCH }} docker://${{ env.IMAGE_REPOSITORY }}:${{ env.LATEST_VERSION }} | jq '.Labels["vcs-ref"]')" >> $GITHUB_OUTPUT
    outputs:
      parent-vcs-ref: ${{ steps.set-image-label-vars.outputs.parent-vcs-ref }}
      child-vcs-ref: ${{ steps.set-image-label-vars.outputs.child-vcs-ref }}

  trigger-build:
    name: trigger-build
    if: ${{ needs.check-image-labels.outputs.parent-vcs-ref != needs.check-image-labels.outputs.child-vcs-ref }}
    needs: ["setup", "check-image-labels"]
    uses: trevorbox/kube-rbac-proxy/.github/workflows/build-ubi-latest.yml@master
    with:
      VERSION_OVERRIDE: ${{ needs.setup.outputs.next_version }}
      TAG_LATEST: true
    secrets: 
      QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
      QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
      IMAGE_REPOSITORY: ${{ secrets.IMAGE_REPOSITORY }}
