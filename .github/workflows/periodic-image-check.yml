name: (Periodic) - Base Image Update Check

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  BUILD_PLATFORMS: "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x"
  
jobs:
  setup:
    runs-on: ubuntu-latest
    steps: 
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setting Workflow Variables
        id: set-variables
        run: |
          echo "::set-output name=repository_name::$(basename $GITHUB_REPOSITORY)"
          # Create Distribution Matrix
          echo "::set-output name=dist_matrix::$(echo -n "${{ env.BUILD_PLATFORMS }}" | jq -csR '. | split(",")')"
          echo "::set-output name=upstream_image::$(grep -oP '(?<=FROM ).*' ./.ci/Containerfile)"
          echo "::set-output name=downstream_image::${{ env.IMAGE_REPOSITORY }}:${{ env.VERSION }}"

      - name: Setting Image Variables
        id: set-variables-image
        run: |
          if [ "${{ secrets.IMAGE_REPOSITORY }}" == "" ]; then
            echo "::set-output name=image_repository_name::${{ steps.set-variables.outputs.repository_name }}"
            echo "::set-output name=image_registry::quay.io/${{ github.repository_owner }}"
          else
            IMAGE_REPOSITORY="${{ secrets.IMAGE_REPOSITORY }}"
            echo "::set-output name=image_repository_name::${IMAGE_REPOSITORY##*/}"
            echo "::set-output name=image_registry::${IMAGE_REPOSITORY%/*}"
          fi       
      - name: Set VERSION Variable tracking from upstream
        id: set-version
        run: echo "::set-output name=version::$(cat VERSION)"
    outputs:
      repository_name: ${{ steps.set-variables.outputs.repository_name }}
      image_repository_name: ${{ steps.set-variables-image.outputs.image_repository_name}}
      dist_matrix: ${{ steps.set-variables.outputs.dist_matrix }}
      upstream_image: ${{ steps.set-variables.outputs.upstream_image }}
      downstream_image: ${{ steps.set-variables.outputs.downstream_image }}
      image_registry: ${{ steps.set-variables-image.outputs.image_registry }}
      version: ${{ steps.set-version.outputs.version}}

  check-image-labels:
    runs-on: ubuntu-latest
    name: check-image-labels
    needs: ["setup"]
    strategy:
      matrix:
        platform: ${{ fromJson(needs.setup.outputs.dist_matrix) }}
    env:
      REPOSITORY_NAME: ${{ needs.setup.outputs.repository_name }}
      UPSTREAM_IMAGE: ${{ needs.setup.outputs.upstream_image }}
      DOWNSTREAM_IMAGE: ${{ needs.setup.outputs.downstream_image }}
      IMAGE_REGISTRY: ${{ needs.setup.outputs.image_registry }}
      IMAGE_REPOSITORY: "${{ needs.setup.outputs.image_registry }}/${{ needs.setup.outputs.image_repository_name }}"
      VERSION: ${{ needs.setup.outputs.version }}

    steps:
      - name: Prepare Image Label Lookup Step
        id: setup-image-label-lookup
        run: |
          echo "::set-output name=platform_os::$(echo ${{ matrix.platform }} |  cut -d/ -f1)"
          echo "::set-output name=platform_arch::$(echo ${{ matrix.platform }} |  cut -d/ -f2)"
      - name: Login to Registry
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }} 
      - name: Get Image Labels
        id: set-image-label-vars
        env:
          OS: ${{ steps.setup-image-label-lookup.outputs.platform_os }}
          ARCH: ${{ steps.setup-image-label-lookup.outputs.platform_arch }}
        run: |
          echo "::set-output name=parent-vcs-ref::$(skopeo inspect --override-os=${{ env.OS }} --override-arch=${{ env.ARCH }} docker://${{ env.UPSTREAM_IMAGE }} | jq '.Labels["vcs-ref"]')"
          echo "::set-output name=child-vcs-ref::$(skopeo inspect --override-os=${{ env.OS }} --override-arch=${{ env.ARCH }} docker://${{ env.IMAGE_REPOSITORY }}:${{ env.VERSION }} | jq '.Labels["vcs-ref"]')"
          
    outputs:
      parent-vcs-ref: ${{ steps.set-image-label-vars.outputs.parent-vcs-ref }}
      child-vcs-ref: ${{ steps.set-image-label-vars.outputs.child-vcs-ref }}

  trigger-build:
    name: trigger-build
    if: ${{ needs.check-image-labels.outputs.parent-vcs-ref != needs.check-image-labels.outputs.child-vcs-ref }}
    needs: ["setup", "check-image-labels"]
    uses: nickjordan/kube-rbac-proxy/.github/workflows/build-ubi8.yml@master
    secrets: 
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      IMAGE_REPOSITORY: ${{ secrets.IMAGE_REPOSITORY }}
